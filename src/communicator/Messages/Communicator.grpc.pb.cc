// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Communicator.proto

#include "Communicator.pb.h"
#include "Communicator.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* Communicator_method_names[] = {
  "/Communicator/classify",
};

std::unique_ptr< Communicator::Stub> Communicator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Communicator::Stub> stub(new Communicator::Stub(channel));
  return stub;
}

Communicator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_classify_(Communicator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Communicator::Stub::classify(::grpc::ClientContext* context, const ::ClassifyRequest& request, ::ClassifyReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_classify_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ClassifyReply>* Communicator::Stub::AsyncclassifyRaw(::grpc::ClientContext* context, const ::ClassifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ClassifyReply>::Create(channel_.get(), cq, rpcmethod_classify_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ClassifyReply>* Communicator::Stub::PrepareAsyncclassifyRaw(::grpc::ClientContext* context, const ::ClassifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ClassifyReply>::Create(channel_.get(), cq, rpcmethod_classify_, context, request, false);
}

Communicator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicator::Service, ::ClassifyRequest, ::ClassifyReply>(
          std::mem_fn(&Communicator::Service::classify), this)));
}

Communicator::Service::~Service() {
}

::grpc::Status Communicator::Service::classify(::grpc::ServerContext* context, const ::ClassifyRequest* request, ::ClassifyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


